#!/usr/bin/env bash

set -o nounset
set -o errexit

function banner() {
    echo Apply ImageMagick effects to audio.
}

function usage() {
    echo Usage: audioimage \[options\] filename
}


function help_text(){
    cat << EOF
$(banner)
$(usage)

Defaults shown in [].
Slice options:
-s, --size           size of each slice [16384x1]
Effect options:
-e, --effect         ImageMagick effect chain []
Other options:
-j, --jobs           number of jobs to use [$(nproc)]
-o, --output-prefix  output prefix [filename]
-O, --output         output name (overrides -o)
-h, --help           this help
EOF
}

function file_notexist(){
    printf ''\''%s'\'': file does not exist\n' "$1"
    exit 3
}

function file_none(){
    echo No file was specified.
    help_text
    exit 4
}

function audioeffect(){
    base="$(basename "$1")"
    tmpsliceaudio="$2"
    sliceres="$3"
    read -ra effect <<< "$4"
    convert -depth 16 -size "$sliceres" GRAY:"$1" "${effect[@]}" GRAY:"$tmpsliceaudio"/"$base"
    rm "$1"
}
export -f audioeffect

function cleanup(){
    rm -r "$tmplist" "$tmpslices" "$tmpsliceaudio"
}

ARGS="$(getopt --options o:,O:,h,s:,e:,j: --long size:,effect:,jobs:,output:,output-prefix:,help -- "$@")"
eval set -- "$ARGS"
while true; do
        case "$1" in
        -o | --output-prefix)
            output_prefix="$2"
            shift 2
            ;;
        -O | --output)
            output_name="$2"
            shift 2
            ;;
        -h | --help)
            help_text
            exit 127
            ;;
        -s | --size)
            sliceres="$2"
            shift 2
            ;;
        -j | --jobs)
            jobs="$2"
            shift 2
            ;;
        -e | --effect)
            effect="$2"
            shift 2
            ;;    
        --)
            set +o nounset 
            if [[ -z "$2" ]]
            then 
                file_none
            elif [[ ! -e "$2" ]]
            then
                file_notexist "$2"
            fi
            set -o nounset
            filepath="$2"
            break
            ;;
        *)
            printf 'How did you get here? The last args I saw were \n%s\n' "$@"
            exit 1
            break
            ;;
    esac
done

sliceres="${sliceres:-16384x1}"
slicewidth="$(printf %s "$sliceres" | cut -dx -f1)"
sliceheight="$(printf %s "$sliceres" | cut -dx -f2)"
jobs="${jobs:-$(nproc)}"
effect="${effect:-}"

channels="$(ffprobe -v error -select_streams a -of default=noprint_wrappers=1:nokey=1 -show_entries stream=channels "$filepath")"
rate="$(ffprobe -v error -select_streams a -of default=noprint_wrappers=1:nokey=1 -show_entries stream=sample_rate "$filepath")"

filename="$(basename "$filepath")"
base_filename="${filename%.*}"
output_prefix="${output_prefix:-$base_filename}"
blanked_name="$output_prefix"-"$sliceres"-"$effect"
output_name="${output_name-:$blanked_name}"

tmpslices="$(mktemp -d)"
tmplist="$(mktemp)"
tmpsliceaudio="$(mktemp -d)"

trap 'cleanup' ERR EXIT

ffmpeg -hide_banner -loglevel error -i "$filepath" -f u16le - | \
ffmpeg -hide_banner -loglevel error -f rawvideo -s "$sliceres" -pix_fmt gray16le -i - -f rawvideo -pix_fmt gray16le "$tmpslices"/big
pushd "$tmpslices"
split --suffix-length=10 -d --bytes "$((sliceheight * slicewidth * 2))" "$tmpslices"/big
rm big
popd

find "$tmpslices" -type f | sort > "$tmplist"
parallel --progress -j"$jobs" --eta audioeffect \{1\} "$tmpsliceaudio" "$sliceres" "'$effect'" :::: "$tmplist"

find "$tmpsliceaudio" -type f | sort | xargs cat | sox -c "$channels" -r "$rate" -t u16 - "$output_name".flac
